APP_HOST= 
# Configuración de la aplicación Node.js
# Nombre del contenedor de la aplicación (usado en docker-compose.yml como container_name)


APP_PORT=
# Puerto en el host donde la aplicación estará disponible (mapeado al puerto 3000 del contenedor)
# Node.js: Las aplicaciones Node.js suelen usar el puerto 3000 dentro del contenedor.
# Es posible mapearlo a cualquier puerto libre en el host (por ejemplo, 3000, 8080, etc.)
# Averiguar si el puerto está libre en linux/mac: lsof -i :3000  / en powershell: netstat -aon | findstr :3000
# Si no aparece nada, está libre, si no se verá el proceso asociado. Si el puerto no responde, también es posible que esté ocupado.
# Puertos comunes para desarrollo: Node.js: 3000, 8080, 5000


DB_HOST=
# Configuración de la base de datos MySQL
# Nombre del contenedor MySQL (usado en docker-compose.yml y como host en Sequelize)
# Debe coincidir con el nombre del servicio 'mysql' en docker-compose.yml


DB_PORT=
# Puerto en el host donde MySQL estará disponible (mapeado al puerto 3306 del contenedor)
# Puertos comunes para desarrollo: MySQL: 3306, 3307

    
DB_ROOT_PASSWORD=
# Contraseña del usuario root de MySQL (requerida por la imagen de MySQL), es la del superadmin, debe coincidir con la de workbench si lo estamos usando.


DB_NAME=
# Nombre de la base de datos que se creará automáticamente al iniciar el contenedor MySQL


DB_USER=
# Usuario personalizado para acceder a la base de datos - usado por Sequelize en node.js para realizar operaciones en la base de datos (como leer, escribir, actualizar o eliminar datos)


DB_PASSWORD=
# Contraseña del usuario personalizado

# Comando: mysql -h localhost -P 3306 -u user_name -p
# Permite verificar que exista el usuario y tenga credenciales correctas (DB_USER, DB_PASSWORD).
# Verifica la conectividad


NODE_ENV=
# Configuración adicional (opcional)
# Entorno de Node.js (development, production, etc.) para configurar el comportamiento de la app

JWTSecret=
# Clave secreta para la autenticación JWT   